<?xml version="1.0" encoding="UTF-8"?>

<project name="modulo">

    <!-- ===========================================================================
PROPERTIES
============================================================================ -->

  <property environment="env"/>
  <!-- Prevents system classpath from being used -->
  <property name="build.sysclasspath" value="ignore"/>

  <!-- Defines the repository layout -->
  <property name="docs.dir" value="${basedir}/docs"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="lib-ant.dir" value="${lib.dir}/ant"/>
  <property name="src.dir" value="${basedir}/src"/>
  <property name="test.dir" value="${basedir}/test"/>

  <!-- Loads custom properties definitions -->
  <property file="${basedir}/build.properties"/>

  <!-- Additional command line arguments for scalac. They are added to all build targets -->
  <property name="scalac.args" value=""/>
  <property name="javac.args" value=""/>

  <!-- Sets location of pre-compiled libraries -->
  <property name="lib.starr.jar" value="${lib.dir}/scala-library.jar"/>
  <property name="comp.starr.jar" value="${lib.dir}/scala-compiler.jar"/>
  <property name="jline.jar" value="${lib.dir}/jline.jar"/>
  <property name="ant.jar" value="${ant.home}/lib/ant.jar"/>

  <!-- Sets location of build folders -->
  <property name="build.dir" value="${basedir}/build"/>
  <property name="build-locker.dir" value="${build.dir}/locker"/>
  <property name="build-palo.dir" value="${build.dir}/palo"/>
  <property name="build-quick.dir" value="${build.dir}/quick"/>
  <property name="build-pack.dir" value="${build.dir}/pack"/>
  <property name="build-strap.dir" value="${build.dir}/strap"/>
  <property name="build-docs.dir" value="${build.dir}/scaladoc"/>
  <property name="build-libs.dir" value="${build.dir}/libs"/>

  <property name="dists.dir" value="${basedir}/dists"/>

  <property name="copyright.string" value="Copyright 2002-2009, LAMP/EPFL"/>
  <property name="partest.version.number" value="0.9.2"/>

  <!-- These are NOT the flags used to run SuperSabbus, but the ones written
       into the script runners created with scala.tools.ant.ScalaTool -->
  <property name="java.flags" value="-Xmx256M -Xms32M"/>

  <!-- if ANT_OPTS is already set by the environment, it will be unaltered,
       but if it is unset it will take this default value. -->
  <property name="env.ANT_OPTS" value="-Xms512M -Xmx1024M -Xss1M -XX:MaxPermSize=128M" />
  <!--  to find max heap usage: -Xaprof ; currently at 980M for locker.comp -->

  <property
      name="scalacfork.jvmargs"
      value="${env.ANT_OPTS}"/>

  <property name="javac.cmd" value="${env.JAVA_HOME}/bin/javac"/>
  <property name="java.cmd" value="${env.JAVA_HOME}/bin/java"/>

<!-- ===========================================================================
INITIALISATION
============================================================================ -->

  <target name="init">
  <!-- scalac.args.optimise is selectively overridden in certain antcall tasks. -->
    <property name="scalac.args.optimise" value=""/>
  <!-- scalac.args.quickonly are added to quick.* targets but not others (particularly, locker.)
       This is to facilitate testing new command line options which do not yet exist in starr. -->
	<property name="scalac.args.quickonly" value=""/>

    <property name="scalac.args.all" value="${scalac.args} ${scalac.args.optimise}"/>
	<property name="scalac.args.quick" value="${scalac.args.all} ${scalac.args.quickonly}"/>
  <!-- Setting-up Ant contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${lib.dir}/ant/ant-contrib.jar"/>
  <!-- This is the start time for the distribution -->
    <tstamp prefix="time">
      <format property="human" pattern="d MMMM yyyy, HH:mm:ss"/>
      <format property="short" pattern="yyyyMMddHHmmss"/>
    </tstamp>
  <!-- Find out whether we are running on Windows -->
    <condition property="os.win">
      <os family="windows"/>
    </condition>
  <!-- Finding out SVN revision -->
    <exec executable="svn" outputproperty="svn.out"
      failifexecutionfails="false">
      <arg line=" info ${basedir}"/>
    </exec>
    <propertyregex
      property="svn.number" input="${svn.out}" select="\1"
      regexp="Revision: ([0-9]+)"
      defaultValue="0"/>
    <property name="init.avail" value="yes"/>
  <!-- Generating version number -->
    <property file="${basedir}/build.number"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}.r${svn.number}-b${time.short}"/>
  <!-- And print-out what we are building -->
    <echo level="info" message="Build number is '${version.number}'"/>
    <echo level="info" message="Built ${time.human} from revision ${svn.number} with ${java.vm.name} ${java.version}"/>
  <!-- Define tasks that can be run with Starr -->
    <path id="starr.classpath">
      <pathelement location="${lib.starr.jar}"/>
      <pathelement location="${comp.starr.jar}"/>
      <pathelement location="${lib.dir}/fjbg.jar"/>
      <pathelement location="${lib.dir}/msil.jar"/>
      <pathelement location="${ant.jar}"/>
    </path>
    <taskdef resource="scala/tools/ant/sabbus/antlib.xml" classpathref="starr.classpath"/>
  </target>



    <target name="clean.locker" depends="init">
        <!-- TODO Abstract out calling down to module builds into a taskdef/macro if possible... -->
        <ant antfile="${src.dir}/build/modules/scala-core.xml" target="clean">
            <property name="build.pass" value="locker"/>
            <property name="build.module.dir" value="${build.dir}/modules"/>
            <reference refid="starr.classpath" torefid="bootstrap.classpath"/>
            <property name="build.classfile.dir" value="${build.dir}/modules/locker/classes"/>
            <property name="build.classpath" value="${build.dir}/modules/locker/classes"/>
        </ant>
    </target>

    <target name="build.locker" depends="init">
        <echo message="HI!"/>
        <stopwatch name="build.locker"/>
                 

        <ant antfile="${src.dir}/build/modules/scala-core.xml" target="compile">
            <property name="build.pass" value="locker"/>
            <property name="build.module.dir" value="${build.dir}/modules"/>
            <reference refid="starr.classpath" torefid="bootstrap.classpath"/>
            <property name="build.classfile.dir" value="${build.dir}/modules/locker/classes"/>
            <property name="build.classpath" value="${build.dir}/modules/locker/classes"/>
        </ant>

        <stopwatch name="build.locker" action="total"/>        
    </target>


</project>